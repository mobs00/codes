import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Embedding, Dense
from tensorflow.keras.preprocessing import sequence

# Load and preprocess data
max_features = 10000
maxlen = 50
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_features)
X_train = sequence.pad_sequences(X_train, maxlen=maxlen)
X_test = sequence.pad_sequences(X_test, maxlen=maxlen)

# Create and train model
model = Sequential([
    Embedding(max_features, 64, input_length=maxlen),
    LSTM(64, dropout=0.2),
    Dense(1, activation='sigmoid')
])

# Use modern optimizer approach
optimizer = tf.keras.optimizers.Adam()
model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

# Use modern callback approach
early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)
model.fit(X_train, y_train, batch_size=32, epochs=3, validation_data=(X_test, y_test), callbacks=[early_stopping])

# Prediction function
def predict_review(text):
    word_index = imdb.get_word_index()
    seq = [word_index.get(word, 0) for word in text.lower().split() if word in word_index and word_index.get(word, 0) < max_features]
    seq = sequence.pad_sequences([seq], maxlen=maxlen)
    score = model.predict(seq, verbose=0)[0][0]  # Added verbose=0 to suppress warnings
    return "Positive" if score > 0.5 else "Negative"

# Test prediction
print(predict_review(input("Enter review: ")))